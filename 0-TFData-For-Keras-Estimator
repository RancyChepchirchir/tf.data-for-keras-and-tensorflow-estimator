{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.12.0-dev20180922\n"
     ]
    }
   ],
   "source": [
    "### Make sure tf-nightly-gpu (>=1.11) should be installed if you only have TF < 1.11\n",
    "import tensorflow as tf\n",
    "import tensorflow as tf; print(tf.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Keras\n",
    "from tensorflow import keras"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 0. Data & Model preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 28, 28) (10000, 28, 28) (60000,) (10000,)\n"
     ]
    }
   ],
   "source": [
    "# My Data\n",
    "(x_train,y_train),(x_test,y_test) = keras.datasets.mnist.load_data()\n",
    "print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data usually have X in float32 & Y in int32\n",
    "x_train = x_train.astype(np.float32)\n",
    "x_test = x_test.astype(np.float32)\n",
    "y_train = y_train.astype(np.int32)\n",
    "y_test = y_test.astype(np.int32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000 10000 784 10\n"
     ]
    }
   ],
   "source": [
    "nClass = 10\n",
    "nData_train = x_train.shape[0]\n",
    "nData_test = x_test.shape[0]\n",
    "nDimIn = x_train.shape[1]*x_train.shape[2]\n",
    "nDimOut = nClass\n",
    "print(nData_train, nData_test, nDimIn, nDimOut) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# My Keras Model\n",
    "def myModel():\n",
    "    dataIn = keras.Input(shape=(nDimIn,), name='X')\n",
    "    fc1 = keras.layers.Dense(40, activation='relu', name='fc1')(dataIn)\n",
    "    fc2 = keras.layers.Dense(40, activation='relu', name='fc2')(fc1)\n",
    "    dataOut = keras.layers.Dense(nDimOut, activation='softmax', name='dataOut')(fc2)\n",
    "    model = keras.Model(inputs=dataIn, outputs=dataOut, name='Y')\n",
    "    return model\n",
    "batchSize = 64\n",
    "nEpoch = 5\n",
    "nSteps = (int)(nData_train/batchSize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "nStep_train = (int)(nData_train/batchSize)\n",
    "nStep_test = (int)(nData_test/batchSize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dataIn (InputLayer)          (None, 784)               0         \n",
      "_________________________________________________________________\n",
      "fc1 (Dense)                  (None, 40)                31400     \n",
      "_________________________________________________________________\n",
      "fc2 (Dense)                  (None, 40)                1640      \n",
      "_________________________________________________________________\n",
      "dataOut (Dense)              (None, 10)                410       \n",
      "=================================================================\n",
      "Total params: 33,450\n",
      "Trainable params: 33,450\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = myModel()\n",
    "model.summary()\n",
    "keras.backend.clear_session()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Using Keras with tf.data from numpy data on the memory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data preprocessing\n",
    "def myMapFunc_npy(xx, yy):\n",
    "    norm = tf.constant(255, dtype=tf.float32, shape=(nDimIn,))\n",
    "    xx = tf.div(tf.reshape(xx, [-1]), norm)\n",
    "    yy = tf.one_hot(yy, nClass)\n",
    "    return xx, yy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# prepare a tf.data.dataset\n",
    "data_train = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n",
    "data_train = data_train.shuffle(nData_train).map(myMapFunc_npy).batch(batchSize).repeat()\n",
    "data_test = tf.data.Dataset.from_tensor_slices((x_test, y_test))\n",
    "data_test = data_test.shuffle(nData_test).map(myMapFunc_npy).batch(batchSize).repeat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = myModel()\n",
    "model.compile(optimizer=tf.train.AdamOptimizer(0.001),loss='categorical_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "937/937 [==============================] - 4s 4ms/step - loss: 0.3711 - acc: 0.8966 - val_loss: 0.1954 - val_acc: 0.9405\n",
      "Epoch 2/5\n",
      "937/937 [==============================] - 3s 4ms/step - loss: 0.1697 - acc: 0.9496 - val_loss: 0.1471 - val_acc: 0.9568\n",
      "Epoch 3/5\n",
      "937/937 [==============================] - 3s 4ms/step - loss: 0.1300 - acc: 0.9615 - val_loss: 0.1200 - val_acc: 0.9640\n",
      "Epoch 4/5\n",
      "937/937 [==============================] - 3s 3ms/step - loss: 0.1081 - acc: 0.9693 - val_loss: 0.1107 - val_acc: 0.9656\n",
      "Epoch 5/5\n",
      "937/937 [==============================] - 3s 4ms/step - loss: 0.0916 - acc: 0.9730 - val_loss: 0.1087 - val_acc: 0.9684\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f861d8a38d0>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(data_train, epochs=nEpoch, validation_data=data_test, steps_per_epoch=nStep_train, validation_steps=nStep_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "del data_train, data_test, model\n",
    "keras.backend.clear_session()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Using Keras with tf.data from TFRecord files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2-1. Write a TFRecord file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([5, 0, 4, ..., 5, 6, 8], dtype=int32)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def _int64_feature(value):\n",
    "  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n",
    "def _float_feature(array):\n",
    "  return tf.train.Feature(float_list=tf.train.FloatList(value=array))\n",
    "def _bytes_feature(value):\n",
    "  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n",
    "\n",
    "def myWriteTFRecord(filename, xx, yy):\n",
    "    writer = tf.python_io.TFRecordWriter(filename)\n",
    "    for ii in range(len(yy)):\n",
    "        myFeat = tf.train.Features(feature={\n",
    "                    'X': _float_feature(xx[ii]),\n",
    "                    'Y': _int64_feature(yy[ii])})\n",
    "        example = tf.train.Example(features=myFeat)\n",
    "        writer.write(example.SerializeToString())\n",
    "    writer.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data should have 2-dim, (N*D)\n",
    "x_train_vec = x_train.reshape([nData_train,-1])\n",
    "x_test_vec = x_test.reshape([nData_test,-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "myWriteTFRecord('mnist_train.tfrecords', x_train_vec, y_train)\n",
    "myWriteTFRecord('mnist_test.tfrecords', x_test_vec, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for serialized_example in tf.python_io.tf_record_iterator('mnist_test.tfrecords'):\n",
    "#     example = tf.train.Example()\n",
    "#     example.ParseFromString(serialized_example)\n",
    "#     x_1 = np.array(example.features.feature['X'].float_list.value)\n",
    "#     y_1 = np.array(example.features.feature['Y'].int64_list.value)\n",
    "#     break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2-2. Training from the TFRecord files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data preprocessing\n",
    "def myMapFunc(example):\n",
    "    feature_def = {'X': tf.FixedLenFeature(nDimIn, tf.float32),\n",
    "                   'Y': tf.FixedLenFeature(1, tf.int64)}\n",
    "    features = tf.parse_single_example(example, feature_def)\n",
    "    norm = tf.constant(255, dtype=tf.float32, shape=(nDimIn,))\n",
    "    xx = tf.div(features['X'], norm)\n",
    "    yy = tf.reshape(tf.one_hot(features['Y'], nClass, dtype=tf.float32), [-1])\n",
    "    return xx, yy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# prepare a tf.data.dataset\n",
    "data_train = tf.data.TFRecordDataset('mnist_train.tfrecords')\n",
    "data_train = data_train.shuffle(nData_train).map(myMapFunc).batch(batchSize).repeat()\n",
    "data_test = tf.data.TFRecordDataset('mnist_test.tfrecords')\n",
    "data_test = data_test.shuffle(nData_test).map(myMapFunc).batch(batchSize).repeat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = myModel()\n",
    "model.compile(optimizer=tf.train.AdamOptimizer(0.001),loss='categorical_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "937/937 [==============================] - 4s 4ms/step - loss: 0.3852 - acc: 0.8933 - val_loss: 0.2080 - val_acc: 0.9377\n",
      "Epoch 2/5\n",
      "937/937 [==============================] - 4s 4ms/step - loss: 0.1864 - acc: 0.9451 - val_loss: 0.1668 - val_acc: 0.9489\n",
      "Epoch 3/5\n",
      "937/937 [==============================] - 4s 4ms/step - loss: 0.1443 - acc: 0.9579 - val_loss: 0.1348 - val_acc: 0.9595\n",
      "Epoch 4/5\n",
      "937/937 [==============================] - 4s 4ms/step - loss: 0.1193 - acc: 0.9639 - val_loss: 0.1273 - val_acc: 0.9619\n",
      "Epoch 5/5\n",
      "937/937 [==============================] - 4s 4ms/step - loss: 0.1008 - acc: 0.9694 - val_loss: 0.1175 - val_acc: 0.9634\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f861c568518>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(data_train, epochs=nEpoch, validation_data=data_test, steps_per_epoch=nStep_train, validation_steps=nStep_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "del data_train, data_test, model\n",
    "keras.backend.clear_session()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Using a pre-made estimator with tf.data from TFRecord files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "937 156\n"
     ]
    }
   ],
   "source": [
    "print(nStep_train, nStep_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def myInputFunc(filename,numData):\n",
    "    data_temp = tf.data.TFRecordDataset(filename)\n",
    "    data_temp = data_temp.shuffle(buffer_size=numData).map(myMapFunc).batch(batchSize).repeat()\n",
    "    return data_temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data preprocessing\n",
    "def myMapFunc(example):\n",
    "    feature_def = {'X': tf.FixedLenFeature(nDimIn, tf.float32),\n",
    "                   'Y': tf.FixedLenFeature(1, tf.int64)}\n",
    "    features = tf.parse_single_example(example, feature_def)\n",
    "    norm = tf.constant(255, dtype=tf.float32, shape=(nDimIn,))\n",
    "    xx = tf.div(features['X'], norm)\n",
    "    yy = features['Y']\n",
    "    return {'X': xx}, yy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpxmb2sdt2\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpxmb2sdt2', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7f85c9774b00>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n"
     ]
    }
   ],
   "source": [
    "feature_columns = [tf.feature_column.numeric_column('X', shape=[784,])]\n",
    "estimator = tf.estimator.DNNClassifier(\n",
    " feature_columns=feature_columns,\n",
    " hidden_units=[40, 40],\n",
    " optimizer=tf.train.AdamOptimizer(0.001),\n",
    " n_classes=10,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmpxmb2sdt2/model.ckpt.\n",
      "INFO:tensorflow:loss = 146.40918, step = 0\n",
      "INFO:tensorflow:global_step/sec: 287.521\n",
      "INFO:tensorflow:loss = 25.670324, step = 100 (0.349 sec)\n",
      "INFO:tensorflow:global_step/sec: 296.847\n",
      "INFO:tensorflow:loss = 19.941593, step = 200 (0.337 sec)\n",
      "INFO:tensorflow:global_step/sec: 323.696\n",
      "INFO:tensorflow:loss = 14.966068, step = 300 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 312.552\n",
      "INFO:tensorflow:loss = 13.971773, step = 400 (0.320 sec)\n",
      "INFO:tensorflow:global_step/sec: 317.29\n",
      "INFO:tensorflow:loss = 26.97361, step = 500 (0.315 sec)\n",
      "INFO:tensorflow:global_step/sec: 336.067\n",
      "INFO:tensorflow:loss = 10.233875, step = 600 (0.298 sec)\n",
      "INFO:tensorflow:global_step/sec: 333.773\n",
      "INFO:tensorflow:loss = 7.984866, step = 700 (0.299 sec)\n",
      "INFO:tensorflow:global_step/sec: 304.069\n",
      "INFO:tensorflow:loss = 16.3278, step = 800 (0.329 sec)\n",
      "INFO:tensorflow:global_step/sec: 310.688\n",
      "INFO:tensorflow:loss = 13.659958, step = 900 (0.322 sec)\n",
      "INFO:tensorflow:global_step/sec: 244.274\n",
      "INFO:tensorflow:loss = 18.72252, step = 1000 (0.409 sec)\n",
      "INFO:tensorflow:global_step/sec: 319.817\n",
      "INFO:tensorflow:loss = 5.5490947, step = 1100 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 322.789\n",
      "INFO:tensorflow:loss = 11.528782, step = 1200 (0.309 sec)\n",
      "INFO:tensorflow:global_step/sec: 321.92\n",
      "INFO:tensorflow:loss = 5.86919, step = 1300 (0.311 sec)\n",
      "INFO:tensorflow:global_step/sec: 326.471\n",
      "INFO:tensorflow:loss = 18.148075, step = 1400 (0.306 sec)\n",
      "INFO:tensorflow:global_step/sec: 319.476\n",
      "INFO:tensorflow:loss = 6.0295267, step = 1500 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 315.823\n",
      "INFO:tensorflow:loss = 43.822662, step = 1600 (0.317 sec)\n",
      "INFO:tensorflow:global_step/sec: 314.944\n",
      "INFO:tensorflow:loss = 12.252806, step = 1700 (0.318 sec)\n",
      "INFO:tensorflow:global_step/sec: 344.444\n",
      "INFO:tensorflow:loss = 5.1650386, step = 1800 (0.290 sec)\n",
      "INFO:tensorflow:global_step/sec: 247.058\n",
      "INFO:tensorflow:loss = 16.513565, step = 1900 (0.405 sec)\n",
      "INFO:tensorflow:global_step/sec: 317.451\n",
      "INFO:tensorflow:loss = 3.0332868, step = 2000 (0.315 sec)\n",
      "INFO:tensorflow:global_step/sec: 308.501\n",
      "INFO:tensorflow:loss = 6.190702, step = 2100 (0.324 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.567\n",
      "INFO:tensorflow:loss = 4.877348, step = 2200 (0.323 sec)\n",
      "INFO:tensorflow:global_step/sec: 295.761\n",
      "INFO:tensorflow:loss = 5.12663, step = 2300 (0.338 sec)\n",
      "INFO:tensorflow:global_step/sec: 308.329\n",
      "INFO:tensorflow:loss = 7.214677, step = 2400 (0.324 sec)\n",
      "INFO:tensorflow:global_step/sec: 313.266\n",
      "INFO:tensorflow:loss = 5.020134, step = 2500 (0.319 sec)\n",
      "INFO:tensorflow:global_step/sec: 304.299\n",
      "INFO:tensorflow:loss = 8.549202, step = 2600 (0.329 sec)\n",
      "INFO:tensorflow:global_step/sec: 307.878\n",
      "INFO:tensorflow:loss = 4.615051, step = 2700 (0.325 sec)\n",
      "INFO:tensorflow:global_step/sec: 306.046\n",
      "INFO:tensorflow:loss = 9.047275, step = 2800 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 254.646\n",
      "INFO:tensorflow:loss = 5.5214815, step = 2900 (0.393 sec)\n",
      "INFO:tensorflow:global_step/sec: 316.303\n",
      "INFO:tensorflow:loss = 6.5830526, step = 3000 (0.316 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.904\n",
      "INFO:tensorflow:loss = 8.371317, step = 3100 (0.323 sec)\n",
      "INFO:tensorflow:global_step/sec: 310.085\n",
      "INFO:tensorflow:loss = 4.3175054, step = 3200 (0.323 sec)\n",
      "INFO:tensorflow:global_step/sec: 314.933\n",
      "INFO:tensorflow:loss = 11.495584, step = 3300 (0.317 sec)\n",
      "INFO:tensorflow:global_step/sec: 307.459\n",
      "INFO:tensorflow:loss = 1.9080024, step = 3400 (0.326 sec)\n",
      "INFO:tensorflow:global_step/sec: 317.92\n",
      "INFO:tensorflow:loss = 5.4800415, step = 3500 (0.314 sec)\n",
      "INFO:tensorflow:global_step/sec: 318.928\n",
      "INFO:tensorflow:loss = 3.023189, step = 3600 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.483\n",
      "INFO:tensorflow:loss = 7.3635874, step = 3700 (0.324 sec)\n",
      "INFO:tensorflow:global_step/sec: 243.731\n",
      "INFO:tensorflow:loss = 7.348278, step = 3800 (0.410 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.184\n",
      "INFO:tensorflow:loss = 6.194879, step = 3900 (0.323 sec)\n",
      "INFO:tensorflow:global_step/sec: 318.753\n",
      "INFO:tensorflow:loss = 7.249118, step = 4000 (0.314 sec)\n",
      "INFO:tensorflow:global_step/sec: 319.197\n",
      "INFO:tensorflow:loss = 5.4515014, step = 4100 (0.313 sec)\n",
      "INFO:tensorflow:global_step/sec: 313.111\n",
      "INFO:tensorflow:loss = 5.076432, step = 4200 (0.319 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.296\n",
      "INFO:tensorflow:loss = 1.9262695, step = 4300 (0.323 sec)\n",
      "INFO:tensorflow:global_step/sec: 305.009\n",
      "INFO:tensorflow:loss = 7.6525426, step = 4400 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 318.511\n",
      "INFO:tensorflow:loss = 9.103056, step = 4500 (0.314 sec)\n",
      "INFO:tensorflow:global_step/sec: 314.272\n",
      "INFO:tensorflow:loss = 6.429981, step = 4600 (0.319 sec)\n",
      "INFO:tensorflow:Saving checkpoints for 4685 into /tmp/tmpxmb2sdt2/model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 3.5895867.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.estimator.canned.dnn.DNNClassifier at 0x7f85c9774828>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimator.train(input_fn=lambda:myInputFunc('mnist_train.tfrecords',nData_train), steps=nStep_train*nEpoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2018-09-23-16:40:12\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpxmb2sdt2/model.ckpt-4685\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Evaluation [15/156]\n",
      "INFO:tensorflow:Evaluation [30/156]\n",
      "INFO:tensorflow:Evaluation [45/156]\n",
      "INFO:tensorflow:Evaluation [60/156]\n",
      "INFO:tensorflow:Evaluation [75/156]\n",
      "INFO:tensorflow:Evaluation [90/156]\n",
      "INFO:tensorflow:Evaluation [105/156]\n",
      "INFO:tensorflow:Evaluation [120/156]\n",
      "INFO:tensorflow:Evaluation [135/156]\n",
      "INFO:tensorflow:Evaluation [150/156]\n",
      "INFO:tensorflow:Evaluation [156/156]\n",
      "INFO:tensorflow:Finished evaluation at 2018-09-23-16:40:12\n",
      "INFO:tensorflow:Saving dict for global step 4685: accuracy = 0.9670473, average_loss = 0.10372576, global_step = 4685, loss = 6.6384487\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 4685: /tmp/tmpxmb2sdt2/model.ckpt-4685\n"
     ]
    }
   ],
   "source": [
    "eval_result = estimator.evaluate(input_fn=lambda:myInputFunc('mnist_test.tfrecords',nData_test), steps=nStep_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'accuracy': 0.9670473, 'average_loss': 0.10372576, 'loss': 6.6384487, 'global_step': 4685}\n"
     ]
    }
   ],
   "source": [
    "print(eval_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Using an estimator from a Keras model with tf.data from TFRecord files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Using the Keras model provided.\n",
      "INFO:tensorflow:Using default config.\n",
      "WARNING:tensorflow:Using temporary folder as model directory: /tmp/tmpscjm_fkf\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/tmpscjm_fkf', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7f82d1cbc080>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n"
     ]
    }
   ],
   "source": [
    "model = myModel()\n",
    "model.compile(optimizer=tf.train.AdamOptimizer(0.001),loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "estimator = keras.estimator.model_to_estimator(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Warm-starting with WarmStartSettings: WarmStartSettings(ckpt_to_initialize_from='/tmp/tmpscjm_fkf/keras/keras_model.ckpt', vars_to_warm_start='.*', var_name_to_vocab_info={}, var_name_to_prev_var_name={})\n",
      "INFO:tensorflow:Warm-starting from: ('/tmp/tmpscjm_fkf/keras/keras_model.ckpt',)\n",
      "INFO:tensorflow:Warm-starting variable: fc1/kernel; prev_var_name: Unchanged\n",
      "INFO:tensorflow:Warm-starting variable: fc1/bias; prev_var_name: Unchanged\n",
      "INFO:tensorflow:Warm-starting variable: fc2/kernel; prev_var_name: Unchanged\n",
      "INFO:tensorflow:Warm-starting variable: fc2/bias; prev_var_name: Unchanged\n",
      "INFO:tensorflow:Warm-starting variable: dataOut/kernel; prev_var_name: Unchanged\n",
      "INFO:tensorflow:Warm-starting variable: dataOut/bias; prev_var_name: Unchanged\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/tmpscjm_fkf/model.ckpt.\n",
      "INFO:tensorflow:loss = 101.15052, step = 0\n",
      "INFO:tensorflow:global_step/sec: 257.181\n",
      "INFO:tensorflow:loss = 98.93974, step = 100 (0.390 sec)\n",
      "INFO:tensorflow:global_step/sec: 284.912\n",
      "INFO:tensorflow:loss = 92.10394, step = 200 (0.351 sec)\n",
      "INFO:tensorflow:global_step/sec: 294.513\n",
      "INFO:tensorflow:loss = 90.66449, step = 300 (0.340 sec)\n",
      "INFO:tensorflow:global_step/sec: 287.217\n",
      "INFO:tensorflow:loss = 98.21988, step = 400 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 285.163\n",
      "INFO:tensorflow:loss = 93.90249, step = 500 (0.352 sec)\n",
      "INFO:tensorflow:global_step/sec: 294.22\n",
      "INFO:tensorflow:loss = 111.17172, step = 600 (0.338 sec)\n",
      "INFO:tensorflow:global_step/sec: 289.167\n",
      "INFO:tensorflow:loss = 97.859886, step = 700 (0.346 sec)\n",
      "INFO:tensorflow:global_step/sec: 290.162\n",
      "INFO:tensorflow:loss = 102.177216, step = 800 (0.344 sec)\n",
      "INFO:tensorflow:global_step/sec: 287.293\n",
      "INFO:tensorflow:loss = 107.573975, step = 900 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 233.204\n",
      "INFO:tensorflow:loss = 95.341415, step = 1000 (0.429 sec)\n",
      "INFO:tensorflow:global_step/sec: 280.519\n",
      "INFO:tensorflow:loss = 114.769516, step = 1100 (0.357 sec)\n",
      "INFO:tensorflow:global_step/sec: 290.549\n",
      "INFO:tensorflow:loss = 103.97612, step = 1200 (0.344 sec)\n",
      "INFO:tensorflow:global_step/sec: 306.338\n",
      "INFO:tensorflow:loss = 112.97068, step = 1300 (0.327 sec)\n",
      "INFO:tensorflow:global_step/sec: 309.234\n",
      "INFO:tensorflow:loss = 124.123764, step = 1400 (0.323 sec)\n",
      "INFO:tensorflow:global_step/sec: 290.987\n",
      "INFO:tensorflow:loss = 94.62187, step = 1500 (0.344 sec)\n",
      "INFO:tensorflow:global_step/sec: 288.248\n",
      "INFO:tensorflow:loss = 106.13481, step = 1600 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 289.96\n",
      "INFO:tensorflow:loss = 97.85988, step = 1700 (0.344 sec)\n",
      "INFO:tensorflow:global_step/sec: 274.736\n",
      "INFO:tensorflow:loss = 104.336, step = 1800 (0.364 sec)\n",
      "INFO:tensorflow:global_step/sec: 228.018\n",
      "INFO:tensorflow:loss = 101.09787, step = 1900 (0.438 sec)\n",
      "INFO:tensorflow:global_step/sec: 287.765\n",
      "INFO:tensorflow:loss = 103.61635, step = 2000 (0.347 sec)\n",
      "INFO:tensorflow:global_step/sec: 298.262\n",
      "INFO:tensorflow:loss = 106.49456, step = 2100 (0.335 sec)\n",
      "INFO:tensorflow:global_step/sec: 293.231\n",
      "INFO:tensorflow:loss = 104.33589, step = 2200 (0.341 sec)\n",
      "INFO:tensorflow:global_step/sec: 286.91\n",
      "INFO:tensorflow:loss = 96.42076, step = 2300 (0.349 sec)\n",
      "INFO:tensorflow:global_step/sec: 280.872\n",
      "INFO:tensorflow:loss = 96.420746, step = 2400 (0.356 sec)\n",
      "INFO:tensorflow:global_step/sec: 291.574\n",
      "INFO:tensorflow:loss = 87.426285, step = 2500 (0.343 sec)\n",
      "INFO:tensorflow:global_step/sec: 287.285\n",
      "INFO:tensorflow:loss = 98.57942, step = 2600 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 285.087\n",
      "INFO:tensorflow:loss = 96.420746, step = 2700 (0.351 sec)\n",
      "INFO:tensorflow:global_step/sec: 288.233\n",
      "INFO:tensorflow:loss = 114.40969, step = 2800 (0.347 sec)\n",
      "INFO:tensorflow:global_step/sec: 228.789\n",
      "INFO:tensorflow:loss = 102.896774, step = 2900 (0.437 sec)\n",
      "INFO:tensorflow:global_step/sec: 300.75\n",
      "INFO:tensorflow:loss = 101.81743, step = 3000 (0.333 sec)\n",
      "INFO:tensorflow:global_step/sec: 294.686\n",
      "INFO:tensorflow:loss = 97.85986, step = 3100 (0.340 sec)\n",
      "INFO:tensorflow:global_step/sec: 300\n",
      "INFO:tensorflow:loss = 101.09787, step = 3200 (0.333 sec)\n",
      "INFO:tensorflow:global_step/sec: 282.599\n",
      "INFO:tensorflow:loss = 80.2307, step = 3300 (0.354 sec)\n",
      "INFO:tensorflow:global_step/sec: 294.51\n",
      "INFO:tensorflow:loss = 106.49456, step = 3400 (0.339 sec)\n",
      "INFO:tensorflow:global_step/sec: 294.258\n",
      "INFO:tensorflow:loss = 97.140305, step = 3500 (0.340 sec)\n",
      "INFO:tensorflow:global_step/sec: 289.683\n",
      "INFO:tensorflow:loss = 100.37833, step = 3600 (0.345 sec)\n",
      "INFO:tensorflow:global_step/sec: 286.087\n",
      "INFO:tensorflow:loss = 93.54252, step = 3700 (0.350 sec)\n",
      "INFO:tensorflow:global_step/sec: 225.81\n",
      "INFO:tensorflow:loss = 97.85986, step = 3800 (0.443 sec)\n",
      "INFO:tensorflow:global_step/sec: 300.77\n",
      "INFO:tensorflow:loss = 94.98164, step = 3900 (0.332 sec)\n",
      "INFO:tensorflow:global_step/sec: 288.35\n",
      "INFO:tensorflow:loss = 105.05545, step = 4000 (0.347 sec)\n",
      "INFO:tensorflow:global_step/sec: 284.325\n",
      "INFO:tensorflow:loss = 89.944725, step = 4100 (0.351 sec)\n",
      "INFO:tensorflow:global_step/sec: 290.421\n",
      "INFO:tensorflow:loss = 97.5001, step = 4200 (0.344 sec)\n",
      "INFO:tensorflow:global_step/sec: 292.547\n",
      "INFO:tensorflow:loss = 105.775, step = 4300 (0.342 sec)\n",
      "INFO:tensorflow:global_step/sec: 287.79\n",
      "INFO:tensorflow:loss = 97.85987, step = 4400 (0.348 sec)\n",
      "INFO:tensorflow:global_step/sec: 288.95\n",
      "INFO:tensorflow:loss = 95.341415, step = 4500 (0.346 sec)\n",
      "INFO:tensorflow:global_step/sec: 291.412\n",
      "INFO:tensorflow:loss = 98.57942, step = 4600 (0.343 sec)\n",
      "INFO:tensorflow:Saving checkpoints for 4685 into /tmp/tmpscjm_fkf/model.ckpt.\n",
      "INFO:tensorflow:Loss for final step: 106.49456.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.estimator.estimator.Estimator at 0x7f85c9771748>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estimator.train(input_fn=lambda:myInputFunc('mnist_train.tfrecords',nData_train), steps=nStep_train*nEpoch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Calling model_fn.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2018-09-23-16:41:21\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/tmpscjm_fkf/model.ckpt-4685\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Evaluation [15/156]\n",
      "INFO:tensorflow:Evaluation [30/156]\n",
      "INFO:tensorflow:Evaluation [45/156]\n",
      "INFO:tensorflow:Evaluation [60/156]\n",
      "INFO:tensorflow:Evaluation [75/156]\n",
      "INFO:tensorflow:Evaluation [90/156]\n",
      "INFO:tensorflow:Evaluation [105/156]\n",
      "INFO:tensorflow:Evaluation [120/156]\n",
      "INFO:tensorflow:Evaluation [135/156]\n",
      "INFO:tensorflow:Evaluation [150/156]\n",
      "INFO:tensorflow:Evaluation [156/156]\n",
      "INFO:tensorflow:Finished evaluation at 2018-09-23-16:41:21\n",
      "INFO:tensorflow:Saving dict for global step 4685: accuracy = 0.9961939, global_step = 4685, loss = 102.31329\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 4685: /tmp/tmpscjm_fkf/model.ckpt-4685\n"
     ]
    }
   ],
   "source": [
    "eval_result = estimator.evaluate(input_fn=lambda:myInputFunc('mnist_test.tfrecords', nData_test), steps=nStep_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'accuracy': 0.9961939, 'loss': 102.31329, 'global_step': 4685}\n"
     ]
    }
   ],
   "source": [
    "print(eval_result)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
